name: Provision & Déploiement API

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Provisionner l'infra GCP
    runs-on: ubuntu-latest

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v3

      - name: Installer Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Créer credentials.json depuis le secret base64
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > ${{ github.workspace }}/infra/credentials.json

      - name: Plan Terraform
        working-directory: infra
        run: |
          terraform init
          terraform plan \
            -var="gcp_credentials=${{ github.workspace }}/infra/credentials.json" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var-file="terraform.tfvars"

      - name: Appliquer Terraform
        working-directory: infra
        run: |
          terraform apply -auto-approve \
            -var="gcp_credentials=${{ github.workspace }}/infra/credentials.json" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var-file="terraform.tfvars"

      - name: Générer inventory.ini pour Ansible
        working-directory: infra
        run: |
          IP=$(terraform output -raw vm_external_ip)
          echo "[api]" > ../ansible/inventory.ini
          echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ../ansible/inventory.ini

  ansible:
    name: Déployer l'API avec Ansible
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v3

      - name: Installer Ansible et SSH client
        run: |
          sudo apt update
          sudo apt install -y ansible openssh-client

      - name: Ajouter la clé SSH privée
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Exécuter le playbook Ansible
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/deploy.yml --ssh-extra-args="-o StrictHostKeyChecking=no"
          
  snapshot:
    name: Snapshot du disque GCP
    runs-on: ubuntu-latest
    needs: ansible

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v3

      - name: Installer gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Authentifier manuellement gcloud avec clé base64
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/zone europe-west9-b

      - name: Créer un snapshot du disque
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          gcloud compute disks snapshot api-vm \
            --snapshot-names=snapshot-api-$TIMESTAMP \
            --zone=europe-west9-b \
            --project=${{ secrets.GCP_PROJECT_ID }}

  restore:
    name: Restaurer depuis le dernier snapshot si échec
    runs-on: ubuntu-latest
    if: failure()
    needs: ansible

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v3

      - name: Installer gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Authentifier manuellement gcloud avec clé base64
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/zone europe-west9-b

      - name: Récupérer le dernier snapshot disponible
        id: last_snapshot
        run: |
          SNAPSHOT=$(gcloud compute snapshots list \
            --filter="name~^snapshot-api-" \
            --sort-by=~creationTimestamp \
            --limit=1 \
            --format="value(name)")
          echo "Nom du snapshot récupéré : $SNAPSHOT"
          echo "snapshot=$SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Détacher et supprimer le disque corrompu
        run: |
          gcloud compute instances detach-disk api-vm --disk=api-vm --zone=europe-west9-b || true
          gcloud compute disks delete api-vm --zone=europe-west9-b --quiet || true

      - name: Recréer le disque à partir du snapshot
        run: |
          gcloud compute disks create api-vm \
            --source-snapshot=${{ steps.last_snapshot.outputs.snapshot }} \
            --zone=europe-west9-b

      - name: Rattacher le disque à la VM
        run: |
          gcloud compute instances attach-disk api-vm \
            --disk=api-vm \
            --zone=europe-west9-b